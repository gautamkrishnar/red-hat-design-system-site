/// ===========================================================================
/// Accordion-specific SASS Vars
/// ===========================================================================

@function pfe-accordion-variables($state: default, $theme: default, $variant: default) {
  // Shared variables for all themes
  $accordion-styles: ();

  @if $state != expanded { // Default state
    // Shared variables for all themes
    $accordion-styles: (
      BorderColor--accent: transparent,
      BorderColor:         pfe-var(surface--border),
      BorderTopWidth:      pfe-var(surface--border-width),
      BorderRightWidth:    0,
      BorderBottomWidth:   pfe-var(surface--border-width),
      BorderLeftWidth:     pfe-var(surface--border-width--heavy),
      Color:               pfe-broadcasted(text),
      TextAlign:           left,
      accent: pfe-var(ui-accent),
      base: (
        Padding:         pfe-var(container-spacer)
      )
    );

    @if $theme == dark { // Dark theme
      $accordion-styles: (
        accent: pfe-var(ui-accent--on-dark)
      );
    }
    @else if $theme == saturated { // Saturated theme
      $accordion-styles: (
        accent: pfe-var(ui-accent--on-saturated)
      );
    }

    @if $variant == disclosure {
      $accordion-styles: (
        BorderRightWidth: pfe-var(surface--border-width),
        BorderLeftWidth: pfe-var(surface--border-width),
        BorderColor--accent: pfe-var(surface--border)
      );
    }
  }
  @else { // Expanded state
    // Shared variables for all themes
    $accordion-styles: (
      BorderColor:         pfe-var(surface--border),
      BorderRightWidth:    pfe-var(surface--border-width),
      BorderLeftWidth:     pfe-var(surface--border-width--heavy),
      // Defaults for light theme
      BackgroundColor:     rgba(255, 255, 255, 1),
      Color:               pfe-var(text),
      BorderColor--accent: pfe-local(accent),
      BoxShadow: 0 5px pfe-var(surface--border-width--heavy) rgba(140, 140, 140, 0.35),
      ZIndex: 3
    );

    @if $theme == dark { // Dark theme
      $accordion-styles: (
        BackgroundColor:    rgba(247, 247, 249, .1),
        Color:               pfe-broadcasted(text),
        BorderColor--accent: pfe-var(ui-accent--on-dark),
        BoxShadow: none
      );
    }
    @else if $theme == saturated { // Saturated theme
      $accordion-styles: (
        BackgroundColor:    rgba(0, 0, 0, 0.2),
        Color:               pfe-broadcasted(text),
        BorderColor--accent: pfe-var(ui-accent--on-saturated),
        BoxShadow: none
      );
    }
    
    @if $variant == disclosure {
      $accordion-styles: (
        BorderLeftWidth: pfe-var(surface--border-width--heavy),
        BorderColor--accent: pfe-var(ui-accent)
      );
    }
  }

  @return $accordion-styles;
}

@mixin pfe-accordion-props($variant: default) {
  margin: 0;
  width: pfe-local(Width, 100%);
  max-width: calc(100% - #{pfe-var(surface--border-width--heavy)});
  height: auto;
  position: relative;

  // Since the default bg color is transparent, look to broadcast values
  background-color: pfe-local(BackgroundColor, transparent);
  color:            pfe-local(Color);

  // Border settings
  border: 0 pfe-var(surface--border-style) pfe-local(BorderColor);
  border-top-width:     pfe-local(BorderTopWidth);
  border-right-width:   pfe-local(BorderRightWidth);
  border-bottom-width:  pfe-local(BorderBottomWidth);
  border-left: pfe-local(BorderLeftWidth) pfe-var(surface--border-style) pfe-local(BorderColor--accent);

  box-shadow: pfe-local(BoxShadow);
  z-index: pfe-local(ZIndex);

  &:hover {
    @include pfe-print-local((
      BorderColor--accent: pfe-local(accent)
    ));
  }
}

//-- Trigger-specific properties
@mixin pfe-trigger {
  $chevron--spacing: 50px;

  $LOCAL-VARIABLES: (
    BorderBottomWidth: 0,
    ZIndex: 3,
    trigger: (
      Padding: pfe-local(Padding, $region: base) $chevron--spacing pfe-local(Padding, $region: base) calc(#{pfe-local(Padding, $region: base)} * 1.5)
    )
  );

  @include pfe-print-local($LOCAL-VARIABLES);
  @include pfe-accordion-props;

  // -webkit-appearance: button;
  cursor: pointer;

  font-family: inherit;
  font-size:   pfe-local(FontSize--header, calc(#{pfe-var(font-size)} * 1.1));
  font-weight: pfe-var(font-weight--bold);
  text-align:  pfe-local(TextAlign, left);
  line-height: pfe-var(line-height);
  padding:     pfe-local(Padding, $region: trigger);

  &:hover {
    outline: none;
    border-left-width: pfe-var(surface--border-width--heavy);
  }

  &:focus {
      outline: none;
      text-decoration: underline;
  }

  &::-moz-focus-inner {
      border: 0;
  }
}

@mixin pfe-trigger-last($theme: light) {
  @include pfe-print-local((
    BorderBottomWidth: pfe-var(surface--border-width)
  ));
}

//-- Panel-specific properties
@mixin pfe-panel-variables($theme: light) {
  $LOCAL-VARIABLES: (
    BorderTopWidth: 0
  );

  @if $theme == "light" { // Light theme
    $LOCAL-VARIABLES: map-deep-merge($LOCAL-VARIABLES, (
      BoxShadow: 0 5px pfe-var(surface--border-width--heavy) rgba(140, 140, 140, 0.35)
    ));
  }
  @else {
    $LOCAL-VARIABLES: map-deep-merge($LOCAL-VARIABLES, (
      BoxShadow: none
    ));
  }

  @include pfe-print-local($LOCAL-VARIABLES);
}

@mixin pfe-panel-container() {
  // Ensure the box shadow does not propagate to nest accordions
  @include pfe-print-local( ( BoxShadow: none ) );

  @extend %container;
  padding: pfe-local(Padding, $region: panel-container);
}

/// ===========================================================================
/// Accordion chevrons
/// ===========================================================================

@mixin pfe-chevron($state: open, $position: after, $size: .4em, $offset: $size) {

  content: "";
  position: absolute;
  top: calc(#{pfe-var(container-spacer)} + #{$offset});

  display: block;
  border-style: pfe-var(surface--border-style);
  height: $size;
  width:  $size;
  transition: transform 0.15s;
  @if $state == open {
    border-width: .1em .1em 0 0;
    border-bottom: 0;
    transform: rotate(-45deg);
    top: calc(#{pfe-var(container-spacer)} + #{$offset});
    @if $position == before {
      left: calc(#{pfe-var(container-spacer)} * 1.3125); // 21px
      top: calc(#{pfe-var(container-spacer)} + .25em);
      transform: rotate(135deg);
    }
    @else {
      right: calc(#{pfe-var(container-spacer)} * 1.3125);
    }
  }
  @else {
    border-width: 0 .1em .1em 0;
    transform: rotate(45deg);
    @if $position == before {
      left: calc(#{pfe-var(container-spacer)} * 1.3125);
      transform: rotate(-45deg);
    }
    @else {
      right: calc(#{pfe-var(container-spacer)} * 1.3125);
    }
  }
}